# Delen en bewerken mag maar laat deze eerste regels staan.
# Bron : https://www.huizebruin.nl
# Bron File : https://github.com/huizebruin/s0tool/tree/main/esphome
# © Huizebruin.nl
#  # ⬇ Enable Home Assistant API ⬇ # 
api:
  services:
    - service: meterstand_water
      variables:
        meter_value: float
      then:
        - globals.set:
            id: initial_water_usage
            value: !lambda "return ( meter_value - ((id(total_water_pulses) / (id(select_flow_pulse).state * 60 )) / 1000) ) ;"
        - globals.set:
            id: total_water_pulses
            value:  "0"             
            

globals:
  - id: initial_water_usage
    type: float
    restore_value: yes      
#    initial_value: '010' 
  - id: total_water_pulses
    type: int
    restore_value: yes
  

#   # ⬇ Water per liter rate ⬇ #
number:
  - platform: template
    id: select_flow_pulse
    name: "[0. Imp.] - [Acqua] - Flow Rate Value del Sensore (es. (7.5xQ) Devi Inserire 7.5)"
    optimistic: true
    mode: box
    min_value: '0.001'
    max_value: '100'
    step: '1'
    restore_value: yes
    initial_value: '7.5'




#------------------------# Watermeter #------------------------#
binary_sensor:
  - platform: gpio
    id: internal_pulse_counter
    name: "[1. INFO] - [Acqua] - Sensore Pulsazioni Acqua (D2)"
    pin:
      number: D2
      inverted: true
      mode:
        input: true
    on_press:
      - then:
          lambda: id(total_water_pulses) += 1;  

sensor:
#------------------------# Watermeter #------------------------#
# ⬇ watermeter pulsen ⬇ #
  - platform: pulse_counter
    pin: D2
    id: watermeter_pulse
    name: "[Acqua] - L/Min Attuali"
    state_class: measurement
    unit_of_measurement: "l/min"
    update_interval: 15s
    accuracy_decimals: 1
    icon: "mdi:water-pump"
    filters:
      lambda: return (x / (id(select_flow_pulse).state * 60 ));

# ⬇ Totaal watermeter ⬇ #      
    total:
      id: sensor_pulse_meter_total
      name: "[Acqua] - Litri Totali (Dal Riavvio)"
      unit_of_measurement: "L"
      state_class: total_increasing
      device_class: water
      accuracy_decimals: 3
      filters:
        lambda: return (x / (id(select_flow_pulse).state * 60 ));

      
# ⬇ Total M3 ⬇ #
  - platform: template
    id: watermeter_total
    name: "[Acqua] - M3 Totali"
    state_class: "total_increasing"
    icon: mdi:water
    unit_of_measurement: "m³"
    accuracy_decimals: 3
    lambda: return id(initial_water_usage) + ((id(total_water_pulses) / (id(select_flow_pulse).state * 60 )) / 1000);
    
    # ⬇ Total M3 ⬇ #
  - platform: template
    id: acqua_litri_totali
    name: "[Acqua] - Litri Totali"
    state_class: "total_increasing"
    icon: mdi:water
    unit_of_measurement: "L"
    accuracy_decimals: 3
    lambda: return id(initial_water_usage) + (id(total_water_pulses) / (id(select_flow_pulse).state * 60 ));

# ⬇ Test Initial Water Usage ⬇ #
  - platform: template
    id: watermeter_test
    name: "[Acqua] - Valore Contatore Attuale Inserito"
    state_class: "total_increasing"
    accuracy_decimals: 0
    lambda: return id(initial_water_usage);
    internal: True
    
  - platform: template
    id: watermeter_q_test
    name: "[Acqua] - Flow Rate * 60"
    accuracy_decimals: 1
    lambda: return id(select_flow_pulse).state * 60;
    internal: True

# ⬇ Waterpulses  only web interface for debugging ⬇ #
  - platform: template
    id: watermeter_pulses
    name: "[Acqua] - Pulsazioni Totali"
    state_class: "total_increasing"
    accuracy_decimals: 0
    lambda: return id(total_water_pulses);
    internal: True
